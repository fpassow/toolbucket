#########################################################################################
## These are a series of examples, from basic ES6 with Babel,                          ##
## to a simple React build setup with ES6, React, and JavaScript modules.              ##
#########################################################################################

#### 1. All the modern JS stuff from Babel ##############################################
npm init
npm install --save-dev babel-core babel-cli babel-preset-es2015
#IN package.json add "babel" script
    babel src -d build --presets=es2015

#### 2. Adding JSX #####################################################################
npm install --save-dev babel-plugin-transform-react-jsx
#Add jsx plugin to "babel" script in package.json
  babel --presets es2015 --plugins transform-react-jsx src -d build
  
#Grab React's js and add it to the html file, and a react script will work.
<script src="react.development.js"></script>
<script src="react-dom.development.js"></script>

#### 3. JavaScript ES6 modules with Webpack ###########################################

# Start over in a clean directory.

npm init
npm install --save-dev webpack webpack-cli

#webpack.config.js:
##################
const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/
      }
    ]
  }
};
#####end of webpack config################

#set script in package.json to run "webpack"
# The .js file that imports all of your other .js files as modules is src/index.js
# The final bundle will be written to dist/bundle.js

# No explicit Babel required. Yet is still converts ES6!!! :-)   

###########################################################################################
## Adding React for a COMPLETE, MINIMAL REACT BUILD SETUP.                               ##
###########################################################################################

# Start with a new, empty directory.

npm init
npm install --save react
npm install --save react-dom
# Note: Not save-dev.

npm install --save-dev babel-core
npm install --save-dev babel-preset-es2015
npm install --save-dev babel-preset-react
npm install --save-dev babel-loader
npm install --save-dev webpack webpack-cli

#Add to package.json "scripts":
    "build": "webpack"
   
#Create .babelrc. This way, webpack just has to run Babel without other arguments.
{
    "presets": ["es2015", "react"],
    "plugins": []
}

#Create webpack.config.js:
const path = require('path');
module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader"
        }
      }
    ]
  }
};

# Put JavaScript files into src/. (Only JavaScript (with JSX). We're not bundling anything else.)
# Create dist/ and put html and other static stuff there (or relative to there). 

npm run build

# The final transpiled and bundled .js will be written to dist/bundle.js. 
