GIT NOTES
---------

GOAL
Stay simple. But include enought commands and concepts for normal tasks without being a cookbook.

A "commit" is what's stored when you do a commit. 
"Head" is the c

THINGS A REPO KNOWS
All its old versions
What's staged (the "index")
???User
???Where it came from

YOU ARE ALWAYS ON A BRANCH. EVERY COMMIT IS ON A BRANCH. 
A BRANCH CALLED "master" IS CREATED AUTOMATICALLY

HELP
git help <whatever>
    Example: "git help init" gives help on "git init"

GET INFO ABOUT STATE OF THE WORKING AREA
git status

SETUP
git config [--global] user.name=...
git config [--global] user.email=...
git config --list
    List all config settings.

MAKE A NEW REPO HERE, WITH CURRENT FILES
git init
    Creates .git, a new master branch, and???

CREATE A NEW REPO BY COPYING
git clone <url_or_path>
    Copies (an entire(!)) repo, and makes a new subdir for the clone.
 
NEW CONTENT / CURRENT REPO
git add <files_expr>
git add --all
    Stages things for the next commit.
    
git commit -m "A_commit_message"
    Commits everythign staged
    
git reset
    Undo all your git add's
    
git reset --hard
    Throw away all actual changes since your last commit
    
git checkout <branch>
    Changes all the file in you work area to the head of the given branch.
    
TODO: "Three main uses for checkout" ??
   "You can check out a branch OR a commit" ??
    HEAD can point to a branch or a commit. If it points to a commit, it is "detached"
       from any branch.
       
       SO I MUST BE ABLE TO USE checkout WITH A COMMIT.????
TODO: push, pull, merge, fetch, remote, checkout, log



EXERCISE: git init  in an empty dir. Looks at everything in .git dir. Do stuff. Look at changes in .git dir

.
.git/info/exclude
   Files and patterns to exclude, ie ignore. What's the difference between this and .gitignore?
   .gitignore files work more like .htaccess. And they are part of the version-controlled content.
   .git/info/exclude is local only and never gets checked in and then checked out by someone else.
